//
//  ContentView.swift
//  Oton.FM
//
//  Created by Yuri on 23/04/2025.
//

import SwiftUI
import AVFoundation
import MediaPlayer
import UIKit
import CoreHaptics
import RevenueCat
import RevenueCatUI

class RadioPlayer: NSObject, ObservableObject {
    static let shared = RadioPlayer()
    private var player: AVPlayer?
    private let defaultArtwork = UIImage(named: "defaultArtwork") // –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—Å—Ç–∞–≤–∫–∏ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    @Published var isPlaying = false
    @Published var currentTrackTitle: String = ""
    @Published var artworkImage: UIImage
    @Published var artworkId: UUID = UUID() // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    @Published var isConnecting: Bool = false
    @Published var isBuffering: Bool = false // –ù–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
    @Published var isDefaultArtworkShown: Bool = true // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –æ–±–ª–æ–∂–∫–∏
    private var hasLoadedArtworkOnce = false
    private var hasLoadedRealArtworkOnce = false // –ù–æ–≤—ã–π —Ñ–ª–∞–≥: –±—ã–ª–∞ –ª–∏ —Ö–æ—Ç—å —Ä–∞–∑ —Ä–µ–∞–ª—å–Ω–∞—è –æ–±–ª–æ–∂–∫–∞
    private var artworkLoadingTask: URLSessionDataTask?
    private var lastTrackTitle: String = ""
    private var retryCount = 0
    private let maxRetries = 3
    private var bufferObservers: [NSKeyValueObservation] = []
    private var bufferingRestartWorkItem: DispatchWorkItem? = nil
    private var autoRestartAttempts = 0
    private let maxAutoRestartAttempts = 3
    private let bufferingTimeout: TimeInterval = 8.0

    private override init() {
        if let defaultImg = UIImage(named: "defaultArtwork") {
            let renderer = UIGraphicsImageRenderer(size: defaultImg.size)
            let roundedImage = renderer.image { context in
                let rect = CGRect(origin: .zero, size: defaultImg.size)
                let path = UIBezierPath(roundedRect: rect, cornerRadius: defaultImg.size.width * 0.062)
                path.addClip()
                defaultImg.draw(in: rect)
            }
            self.artworkImage = roundedImage
        } else {
            self.artworkImage = UIImage()
        }
        super.init()
    }

    func playStream() {
        isConnecting = true
        guard let url = URL(string: "https://s4.radio.co/s696f24a77/listen") else { return }
        do {
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
        } catch {
            print("Failed to set up audio session: \(error)")
        }
        player = AVPlayer(url: url)
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É—Ñ–µ—Ä–∞: 20 —Å–µ–∫—É–Ω–¥
        player?.currentItem?.preferredForwardBufferDuration = 20
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
        bufferObservers.forEach { $0.invalidate() }
        bufferObservers.removeAll()
        // –î–æ–±–∞–≤–ª—è–µ–º KVO –Ω–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
        if let item = player?.currentItem {
            let obs1 = item.observe(\AVPlayerItem.isPlaybackBufferEmpty, options: [.new, .initial]) { [weak self] item, change in
                DispatchQueue.main.async {
                    if item.isPlaybackBufferEmpty {
                        self?.isBuffering = true
                        print("[Buffer] –ë—É—Ñ–µ—Ä –ø—É—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è...")
                        self?.scheduleBufferingRestart()
                    }
                }
            }
            let obs2 = item.observe(\AVPlayerItem.isPlaybackLikelyToKeepUp, options: [.new, .initial]) { [weak self] item, change in
                DispatchQueue.main.async {
                    if item.isPlaybackLikelyToKeepUp {
                        self?.isBuffering = false
                        print("[Buffer] –ë—É—Ñ–µ—Ä –Ω–∞–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.")
                        self?.cancelBufferingRestart()
                        self?.autoRestartAttempts = 0 // –°–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                    }
                }
            }
            bufferObservers.append(contentsOf: [obs1, obs2])
        }
        player?.currentItem?.addObserver(self, forKeyPath: "timedMetadata", options: [.new, .initial], context: nil)
        player?.play()
        fetchArtworkFromStatusAPI()
        setupNowPlaying()
        setupRemoteCommandCenter()
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ isPlaying –≤ true –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        // —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—É–ª—å—Å–∞—Ü–∏—é —Å—Ä–∞–∑—É
        DispatchQueue.main.async {
            self.isPlaying = true
        }
    }

    private func fetchArtworkFromStatusAPI() {
        let statusURL = URL(string: "https://public.radio.co/stations/s696f24a77/status")!
        var request = URLRequest(url: statusURL)
        request.cachePolicy = .reloadIgnoringLocalCacheData
        request.timeoutInterval = 15
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        let uniqueURL = URL(string: "\(statusURL.absoluteString)?nocache=\(Date().timeIntervalSince1970)")!
        request = URLRequest(url: uniqueURL)
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        let config = URLSessionConfiguration.default
        config.requestCachePolicy = .reloadIgnoringLocalCacheData
        config.urlCache = nil
        config.timeoutIntervalForRequest = 10
        config.timeoutIntervalForResource = 10
        let session = URLSession(configuration: config)
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        artworkLoadingTask?.cancel()
        
        artworkLoadingTask = session.dataTask(with: request) { [weak self] data, response, error in
            guard let self = self else { return }
            
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: \(error.localizedDescription)")
                return
            }
            
            guard let data = data else {
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞")
                return
            }
            
            print("üß© –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–∫–µ")
            
            guard let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                  let current = json["current_track"] as? [String: Any],
                  let artworkURLString = current["artwork_url_large"] as? String,
                  let title = current["title"] as? String else {
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –æ–±–ª–æ–∂–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞")
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —Ç–æ–º—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
            if !self.currentTrackTitle.isEmpty && title != self.currentTrackTitle && title != self.lastTrackTitle {
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç—Ä–µ–∫–æ–≤: API –≤–µ—Ä–Ω—É–ª \(title), —Ç–µ–∫—É—â–∏–π: \(self.currentTrackTitle)")
                return
            }

            print("üé® –ü–æ–ª—É—á–µ–Ω artwork URL: \(artworkURLString)")
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º timestamp –∫ URL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            let timestamp = Date().timeIntervalSince1970
            let cacheBustingURLString = "\(artworkURLString)?nocache=\(timestamp)"
            guard let imageURL = URL(string: cacheBustingURLString) else {
                print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL –æ–±–ª–æ–∂–∫–∏")
                return
            }
            
            print("üîÑ –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(cacheBustingURLString)")
            
            // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            var imageRequest = URLRequest(url: imageURL)
            imageRequest.cachePolicy = .reloadIgnoringLocalCacheData
            imageRequest.addValue("no-cache", forHTTPHeaderField: "Cache-Control")
            imageRequest.timeoutInterval = 10
            
            let imageTask = session.dataTask(with: imageRequest) { [weak self] imageData, imageResponse, imageError in
                guard let self = self else { return }
                
                print("üì∑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
                if let error = imageError {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(error.localizedDescription)")
                    
                    if self.retryCount < self.maxRetries {
                        self.retryCount += 1
                        print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (\(self.retryCount)/\(self.maxRetries))")
                        
                        let delay = Double(self.retryCount) * 2.0
                        DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                            self.fetchArtworkFromStatusAPI()
                        }
                    } else {
                        print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏")
                        self.retryCount = 0
                    }
                    return
                }
                
                guard let imageData = imageData, !imageData.isEmpty else {
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    return
                }
                
                if let image = UIImage(data: imageData) {
                    DispatchQueue.main.async {
                        print("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ URL –æ–±–ª–æ–∂–∫–∏: \(artworkURLString)")
                        let isStationLogo = artworkURLString.contains("station_logos") || artworkURLString.contains("s696f24a77") || artworkURLString.lowercased().contains("oton")
                        print("üîç –≠—Ç–æ –ª–æ–≥–æ—Ç–∏–ø —Å—Ç–∞–Ω—Ü–∏–∏? \(isStationLogo ? "–î–∞" : "–ù–µ—Ç")")
                        // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–≥–æ—Ç–∏–ø —Å—Ç–∞–Ω—Ü–∏–∏:
                        if isStationLogo {
                            if !self.hasLoadedRealArtworkOnce {
                                self.setDefaultArtwork()
                            } // –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –Ω–µ –∑–∞—Ç–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ–±–ª–æ–∂–∫—É
                        } else {
                            self.setTrackArtwork(image)
                            self.hasLoadedRealArtworkOnce = true
                        }
                    }
                }
            }
            imageTask.resume()
        }
        artworkLoadingTask?.resume()
    }

    private func setDefaultArtwork() {
        DispatchQueue.main.async {
            if let defaultImg = self.defaultArtwork {
                let renderer = UIGraphicsImageRenderer(size: defaultImg.size)
                let roundedImage = renderer.image { context in
                    let rect = CGRect(origin: .zero, size: defaultImg.size)
                    let path = UIBezierPath(roundedRect: rect, cornerRadius: defaultImg.size.width * 0.062)
                    path.addClip()
                    defaultImg.draw(in: rect)
                }
                self.artworkImage = roundedImage
                self.artworkId = UUID()
                self.isDefaultArtworkShown = true
                let artwork = MPMediaItemArtwork(boundsSize: roundedImage.size) { _ in roundedImage }
                MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPMediaItemPropertyArtwork] = artwork
                print("üéµ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            }
        }
    }
    
    private func setTrackArtwork(_ image: UIImage) {
        DispatchQueue.main.async {
            let renderer = UIGraphicsImageRenderer(size: image.size)
            let roundedImage = renderer.image { context in
                let rect = CGRect(origin: .zero, size: image.size)
                let path = UIBezierPath(roundedRect: rect, cornerRadius: image.size.width * 0.062)
                path.addClip()
                image.draw(in: rect)
            }
            self.artworkImage = roundedImage
            self.artworkId = UUID()
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –ª–∏ —ç—Ç–æ –æ–±–ª–æ–∂–∫–∞ (–∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø —Å—Ç–∞–Ω—Ü–∏–∏)
            var isDefault = false
            if let defaultImg = self.defaultArtwork,
               let data1 = defaultImg.pngData(),
               let data2 = image.pngData(),
               data1 == data2 {
                isDefault = true
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ true, –∏–Ω–∞—á–µ false
            self.isDefaultArtworkShown = isDefault ? true : false
            print("üÜî –ù–æ–≤—ã–π ID –æ–±–ª–æ–∂–∫–∏: \(self.artworkId), isDefaultArtworkShown = \(self.isDefaultArtworkShown)")
            let artwork = MPMediaItemArtwork(boundsSize: roundedImage.size) { _ in roundedImage }
            MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPMediaItemPropertyArtwork] = artwork
            print("üéµ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞")
        }
    }

    func pause() {
        player?.pause()
        isPlaying = false
        isBuffering = false
        cancelBufferingRestart()
    }

    private func setupNowPlaying() {
        let image = self.artworkImage
        let artwork = MPMediaItemArtwork(boundsSize: image.size) { _ in image }

        let nowPlayingInfo: [String: Any] = [
            MPMediaItemPropertyTitle: currentTrackTitle.isEmpty ? "Oton.FM Radio" : currentTrackTitle,
            MPMediaItemPropertyArtist: "Live Stream",
            MPMediaItemPropertyArtwork: artwork
        ]
        MPNowPlayingInfoCenter.default().nowPlayingInfo = nowPlayingInfo
    }

    private func setupRemoteCommandCenter() {
        let commandCenter = MPRemoteCommandCenter.shared()

        commandCenter.playCommand.addTarget { [weak self] _ in
            self?.playStream()
            return .success
        }

        commandCenter.pauseCommand.addTarget { [weak self] _ in
            self?.pause()
            return .success
        }

        commandCenter.playCommand.isEnabled = true
        commandCenter.pauseCommand.isEnabled = true
    }

    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "timedMetadata",
           let metadataItems = player?.currentItem?.timedMetadata {
            for item in metadataItems {
                if let value = item.value as? String {
                    print("üìå –ù–æ–≤—ã–π —Ç—Ä–µ–∫: \(value)")
                    DispatchQueue.main.async {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        let previousTrack = self.currentTrackTitle
                        let isNewTrack = previousTrack != value
                        self.currentTrackTitle = value
                        self.isConnecting = false
                        self.isPlaying = true
                        MPNowPlayingInfoCenter.default().nowPlayingInfo?[MPMediaItemPropertyTitle] = value
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫
                        if isNewTrack {
                            print("üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–∫: \(value), –ø—Ä–µ–¥—ã–¥—É—â–∏–π: \(previousTrack)")
                            // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
                            self.hasLoadedRealArtworkOnce = false
                            // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                            self.artworkLoadingTask?.cancel()
                            self.lastTrackTitle = value
                            
                            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É
                            print("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –¥–ª—è —Ç—Ä–µ–∫–∞: \(value)")
                            // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É, –∞ –≤—Ç–æ—Ä–æ–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π,
                            // —Ç.–∫. API –∏–Ω–æ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—É—é –æ–±–ª–æ–∂–∫—É
                            self.fetchArtworkFromStatusAPI()
                            
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –æ–±–ª–æ–∂–∫–∏
                            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫ –Ω–µ —Å–º–µ–Ω–∏–ª—Å—è –∑–∞ –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏
                                if self.currentTrackTitle == value {
                                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±–ª–æ–∂–∫–∏ –¥–ª—è: \(value)")
                                    self.fetchArtworkFromStatusAPI()
                                }
                            }
                        } else {
                            print("‚ÑπÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º –∂–µ —Ç—Ä–µ–∫–µ: \(value)")
                        }
                    }
                }
            }
        }
    }

    private func scheduleBufferingRestart() {
        cancelBufferingRestart()
        guard autoRestartAttempts < maxAutoRestartAttempts else {
            print("[Buffer] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø–æ—Ç–æ–∫–∞.")
            return
        }
        let workItem = DispatchWorkItem { [weak self] in
            guard let self = self else { return }
            if self.isBuffering {
                self.autoRestartAttempts += 1
                print("[Buffer] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –ø–æ—Ç–æ–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ \(self.autoRestartAttempts)/\(self.maxAutoRestartAttempts))...")
                self.player?.pause()
                self.playStream()
            }
        }
        bufferingRestartWorkItem = workItem
        DispatchQueue.main.asyncAfter(deadline: .now() + bufferingTimeout, execute: workItem)
    }

    private func cancelBufferingRestart() {
        bufferingRestartWorkItem?.cancel()
        bufferingRestartWorkItem = nil
    }

    deinit {
        bufferObservers.forEach { $0.invalidate() }
        bufferObservers.removeAll()
        cancelBufferingRestart()
    }
}

struct SplashView: View {
    @State private var animate = false
    @State private var pulseAnimation = false
    @Binding var isActive: Bool
    
    // Spotify-inspired colors
    private let spotifyBlack = Color(red: 18/255, green: 18/255, blue: 18/255)
    private let spotifyGreen = Color(red: 30/255, green: 215/255, blue: 96/255)

    var body: some View {
        ZStack {
            // Dark gradient background like Spotify
            LinearGradient(
                gradient: Gradient(colors: [
                    spotifyBlack,
                    Color(red: 25/255, green: 20/255, blue: 20/255)
                ]),
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            // Optional: subtle radial gradient around the logo
            RadialGradient(
                gradient: Gradient(colors: [
                    Color(red: 208/255, green: 0, blue: 0).opacity(0.3),
                    Color.clear
                ]),
                center: .center,
                startRadius: 50,
                endRadius: 180
            )
            .scaleEffect(pulseAnimation ? 1.2 : 1.0)
            .opacity(pulseAnimation ? 0.7 : 0.3)
            .animation(
                Animation.easeInOut(duration: 1.0)
                    .repeatForever(autoreverses: true),
                value: pulseAnimation
            )

            VStack(spacing: 20) {
                Image("otonLogo-Light")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 100, height: 100)
                    .scaleEffect(animate ? 1.1 : 0.9)
                    .opacity(animate ? 1 : 0.8)
                    .animation(
                        Animation.easeInOut(duration: 1.2)
                            .repeatCount(1, autoreverses: false),
                        value: animate
                    )
            }
        }
        .onAppear {
            animate = true
            pulseAnimation = true
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                withAnimation(.easeInOut(duration: 0.5)) {
                    isActive = false
                }
            }
        }
        .preferredColorScheme(.dark)
    }
}

struct ContentView: View {
    @StateObject private var player = RadioPlayer.shared
    @State private var isInterfaceVisible = false
    @State private var isPressed = false
    @State private var pulsateAnimation = false
    @State private var hapticEngine: CHHapticEngine?
    @State private var showingPaywall = false
    @State private var showPurchaseSuccess = false
    @State private var isPremiumUser = false
    // --- –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –Ø–∫—É—Ç–∏–∏ ---
    @State private var currentGradientIndex: Int = Int.random(in: 0..<yakutiaGradients.count)
    @State private var nextGradientIndex: Int = 0
    @State private var gradientTransition: Double = 0.0
    @State private var gradientTimer: Timer? = nil
    
    // Spotify-inspired colors
    private let spotifyGreen = Color(UIColor(red: 0.81, green: 0.17, blue: 0.17, alpha: 1.00))
    private let spotifyBlack = Color(red: 18/255, green: 18/255, blue: 18/255)
    private let spotifyDarkGray = Color(red: 40/255, green: 40/255, blue: 40/255)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    private func checkPremiumStatus() {
        Purchases.shared.getCustomerInfo { (customerInfo, error) in
            if let customerInfo = customerInfo, !customerInfo.entitlements.all.isEmpty {
                self.isPremiumUser = true
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É")
            } else {
                self.isPremiumUser = false
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏")
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ paywall
    private func checkAndShowPaywall() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏
        checkPremiumStatus()
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–º–∏—É–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ paywall –ø–æ –¥–Ω—è–º
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            if !self.isPremiumUser && AppDelegate.shouldShowPaywall() {
                self.showingPaywall = true
                AppDelegate.markPaywallAsDisplayed()
                print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º paywall –Ω–∞ \(AppDelegate.daysSinceFirstLaunch()) –¥–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
            }
        }
    }
    
    var body: some View {
        ZStack {
            // –§–æ–Ω: –µ—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞ ‚Äî –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç, –∏–Ω–∞—á–µ ‚Äî averageColor
            Group {
                if player.isDefaultArtworkShown {
                    interpolatedGradient()
                        .ignoresSafeArea()
                        .animation(.easeInOut(duration: 0.8), value: currentGradientIndex)
                } else {
                    LinearGradient(
                        gradient: Gradient(colors: [
                            Color(player.artworkImage.averageColor ?? UIColor(red: 18/255, green: 18/255, blue: 18/255, alpha: 1.0)).opacity(0.8),
                            spotifyBlack
                        ]),
                        startPoint: .top,
                        endPoint: .bottom
                    )
                    .ignoresSafeArea()
                    .animation(.easeInOut(duration: 0.8), value: player.artworkId)
                }
            }
            // –û–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
            if showPurchaseSuccess {
                VStack(spacing: 20) {
                    Image(systemName: "checkmark.circle.fill")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 80, height: 80)
                        .foregroundColor(spotifyGreen)
                    
                    Text("–ö”©–º”©“• –∏“ª–∏–Ω –±–∞—Ä“ï–∞ –º–∞—Ö—Ç–∞–ª!")
                        .font(.system(size: 24, weight: .bold))
                        .foregroundColor(.white)
                    
                    Text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
                        .font(.system(size: 16))
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                    
                    Button(action: {
                        withAnimation {
                            showPurchaseSuccess = false
                        }
                    }) {
                        Text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                            .font(.system(size: 16, weight: .bold))
                            .foregroundColor(.black)
                            .padding(.horizontal, 30)
                            .padding(.vertical, 12)
                            .background(spotifyGreen)
                            .clipShape(Capsule())
                    }
                    .padding(.top, 10)
                }
                .padding(30)
                .background(Color.black.opacity(0.7))
                .clipShape(RoundedRectangle(cornerRadius: 20))
                .shadow(color: .black.opacity(0.5), radius: 20, x: 0, y: 10)
                .transition(.scale.combined(with: .opacity))
                .zIndex(2)
            }

            if isInterfaceVisible {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º ZStack –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                ZStack {
                    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
                    VStack(spacing: 0) {
                        // Top bar with premium button
                        HStack {
                            Spacer()
                            
                            Button(action: {
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º paywall –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏
                                showingPaywall = true
                            }) {
                                Image(systemName: "gift.fill")
                                    .font(.system(size: 18, weight: .bold))
                                    .foregroundColor(.black)
                                    .padding(.horizontal, 12)
                                    .padding(.vertical, 8)
                                    .background(Color.white)
                                    .clipShape(Capsule())
                            }
                            // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            .onLongPressGesture(minimumDuration: 1.5) {
                                if AppDelegate.isPaywallTestModeEnabled() {
                                    AppDelegate.disablePaywallTestMode()
                                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                    playHapticFeedback(.heavy)
                                } else {
                                    AppDelegate.enablePaywallTestMode()
                                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º paywall
                                    playHapticFeedback(.heavy)
                                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                        showingPaywall = true
                                    }
                                }
                            }
                            .sheet(isPresented: $showingPaywall, onDismiss: {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è Paywall
                                Purchases.shared.getCustomerInfo { (customerInfo, error) in
                                    if error == nil {
                                        let hasChanged = customerInfo?.entitlements.active.count ?? 0 > 0 && 
                                                        customerInfo?.nonSubscriptions.count ?? 0 > 0 &&
                                                        customerInfo?.nonSubscriptions.last?.purchaseDate.timeIntervalSinceNow ?? 0 > -10
                                        
                                        if hasChanged {
                                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞
                                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                                showPurchaseSuccess = true
                                            }
                                        }
                                    }
                                }
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                                Purchases.shared.getCustomerInfo { (info, _) in
                                    if let info = info, !info.entitlements.all.isEmpty {
                                        self.isPremiumUser = true
                                    }
                                }
                            }) {
                                PaywallView(
                                    fonts: RoundedFontProvider(), 
                                    displayCloseButton: true
                                )
                            }
                        }
                        .padding(.horizontal, UIScreen.main.bounds.width * 0.075)
                        .padding(.top, 20)
                        
                        Spacer()
                        
                        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å –æ–±–ª–æ–∂–∫–æ–π (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
                        Image(uiImage: player.artworkImage)
                            .resizable()
                            .aspectRatio(contentMode: .fit)
                            .frame(width: UIScreen.main.bounds.width * 0.85, height: UIScreen.main.bounds.width * 0.85)
                            .clipShape(RoundedRectangle(cornerRadius: 10))
                            .shadow(color: Color(player.artworkImage.averageColor ?? .black).opacity(0.6), radius: 25, x: 0, y: 10)
                            .scaleEffect(player.isPlaying && pulsateAnimation ? 1.02 : 1.0)
                            .animation(.easeInOut(duration: 1.5).repeatForever(autoreverses: true), value: pulsateAnimation)
                            .animation(.easeInOut(duration: 0.6), value: player.artworkId)
                        
                        Spacer()
                        
                        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏
                        VStack(spacing: 30) {
                            // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞, –ø–æ–¥–Ω—è—Ç–æ –Ω–∞ 40pt –≤–≤–µ—Ä—Ö
                            VStack(alignment: .leading) {
                                ZStack(alignment: .leading) {
                                    if player.isConnecting {
                                        ConnectingText()
                                            .lineLimit(2)
                                            .transition(AnyTransition.opacity.combined(with: .move(edge: .bottom)))
                                    } else if player.isPlaying && !player.currentTrackTitle.isEmpty {
                                        Text(player.currentTrackTitle)
                                            .id(player.currentTrackTitle)
                                            .font(.system(size: 22, weight: .bold))
                                            .foregroundColor(.white)
                                            .lineLimit(2)
                                            .frame(height: 60, alignment: .leading)
                                            .transition(AnyTransition.opacity.combined(with: .move(edge: .bottom)))
                                    } else {
                                        Text("OTON FM")
                                            .font(.system(size: 22, weight: .bold))
                                            .foregroundColor(.white)
                                            .lineLimit(2)
                                            .frame(height: 60, alignment: .leading)
                                            .transition(AnyTransition.opacity.combined(with: .move(edge: .bottom)))
                                    }
                                }
                                .animation(.easeInOut(duration: 0.5), value: player.isConnecting)
                                .animation(.easeInOut(duration: 0.5), value: player.currentTrackTitle)
                                .animation(.easeInOut(duration: 0.5), value: player.isPlaying)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            }
                            .padding(.horizontal, UIScreen.main.bounds.width * 0.075)
                            .offset(y: -40) // –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ 40pt –≤–≤–µ—Ä—Ö
                            
                            // Play/Pause button
                            HStack {
                                Spacer()
                                
                                Button(action: {
                                    playComplexHaptic()
                                    
                                    if player.isPlaying {
                                        player.pause()
                                    } else {
                                        player.playStream()
                                    }
                                    pulsateAnimation = player.isPlaying
                                }) {
                                    ZStack {
                                        Circle()
                                            .fill(Color.white)
                                            .frame(width: 64, height: 64)
                                        
                                        if player.isBuffering && player.isPlaying {
                                            ProgressView()
                                                .progressViewStyle(CircularProgressViewStyle(tint: spotifyBlack))
                                                .scaleEffect(1.2)
                                        } else {
                                            Image(systemName: player.isPlaying ? "pause.fill" : "play.fill")
                                                .font(.system(size: 30, weight: .bold))
                                                .foregroundColor(spotifyBlack)
                                                .offset(x: player.isPlaying ? 0 : 2)
                                        }
                                    }
                                    .scaleEffect(isPressed ? 0.9 : 1.0)
                                    .animation(.easeOut(duration: 0.2), value: isPressed)
                                }
                                .buttonStyle(.plain)
                                .simultaneousGesture(
                                    DragGesture(minimumDistance: 0)
                                        .onChanged { _ in 
                                            isPressed = true
                                            playHapticFeedback(.light)
                                        }
                                        .onEnded { _ in 
                                            isPressed = false
                                            playHapticFeedback(.light)
                                        }
                                )
                                
                                Spacer()
                            }
                            .padding(.bottom, 30)
                        }
                    }
                }
                .transition(.opacity)
                .animation(.easeInOut(duration: 1.0), value: isInterfaceVisible)
            }
        }
        .onAppear {
            withAnimation {
                isInterfaceVisible = true
            }
            pulsateAnimation = player.isPlaying
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º paywall –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            checkAndShowPaywall()
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞
            if player.isDefaultArtworkShown {
                startGradientTimer()
            }
        }
        .onChange(of: player.isPlaying) { isPlaying in
            pulsateAnimation = isPlaying
        }
        .onChange(of: player.currentTrackTitle) { _ in
            playHapticFeedback(.medium)
        }
        .onChange(of: player.isDefaultArtworkShown) { isDefault in
            if isDefault {
                // –ü—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –ø–æ–∫–∞–∑–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –æ–±–ª–æ–∂–∫–∏ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                let randomIndex = Int.random(in: 0..<yakutiaGradients.count)
                currentGradientIndex = randomIndex
                nextGradientIndex = (randomIndex + 1) % yakutiaGradients.count
                gradientTransition = 0.0
                startGradientTimer()
            } else {
                stopGradientTimer()
            }
        }
        .onAppear(perform: prepareHaptics)
        .preferredColorScheme(.dark) // Spotify –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º haptic engine
    private func prepareHaptics() {
        guard CHHapticEngine.capabilitiesForHardware().supportsHaptics else { return }
        
        do {
            hapticEngine = try CHHapticEngine()
            try hapticEngine?.start()
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ haptic engine: \(error.localizedDescription)")
        }
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    private func playHapticFeedback(_ style: UIImpactFeedbackGenerator.FeedbackStyle) {
        let generator = UIImpactFeedbackGenerator(style: style)
        generator.impactOccurred()
    }
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–∞–∫—Ç–∏–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    private func playComplexHaptic() {
        guard CHHapticEngine.capabilitiesForHardware().supportsHaptics,
              let engine = hapticEngine else { return }
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
        let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: 1.0)
        let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: 0.7)
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        let event1 = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: 0)
        let event2 = CHHapticEvent(eventType: .hapticContinuous, parameters: [
            CHHapticEventParameter(parameterID: .hapticIntensity, value: 0.5),
            CHHapticEventParameter(parameterID: .hapticSharpness, value: 0.5)
        ], relativeTime: 0.1, duration: 0.2)
        
        do {
            let pattern = try CHHapticPattern(events: [event1, event2], parameters: [])
            let player = try engine.makePlayer(with: pattern)
            try player.start(atTime: 0)
        } catch {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: \(error.localizedDescription)")
        }
    }
    
    // --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–º–µ–Ω—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ ---
    private func startGradientTimer() {
        stopGradientTimer()
        nextGradientIndex = (currentGradientIndex + 1) % yakutiaGradients.count
        gradientTransition = 0.0
        gradientTimer = Timer.scheduledTimer(withTimeInterval: 10.0, repeats: true) { _ in
            withAnimation(.easeInOut(duration: 3.0)) {
                gradientTransition = 1.0
            }
            // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                currentGradientIndex = nextGradientIndex
                nextGradientIndex = (currentGradientIndex + 1) % yakutiaGradients.count
                gradientTransition = 0.0
            }
        }
    }
    
    private func stopGradientTimer() {
        gradientTimer?.invalidate()
        gradientTimer = nil
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–≤–Ω–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–±–æ—Ä–∞–º–∏ —Ü–≤–µ—Ç–æ–≤
    private func interpolatedGradient() -> LinearGradient {
        let from = yakutiaGradients[currentGradientIndex]
        let to = yakutiaGradients[nextGradientIndex]
        
        func lerp(_ a: CGFloat, _ b: CGFloat, t: Double) -> CGFloat {
            return a + (b - a) * CGFloat(t)
        }
        
        func lerpColor(_ a: UIColor, _ b: UIColor, t: Double) -> Color {
            var ar: CGFloat = 0, ag: CGFloat = 0, ab: CGFloat = 0, aa: CGFloat = 0
            var br: CGFloat = 0, bg: CGFloat = 0, bb: CGFloat = 0, ba: CGFloat = 0
            a.getRed(&ar, green: &ag, blue: &ab, alpha: &aa)
            b.getRed(&br, green: &bg, blue: &bb, alpha: &ba)
            return Color(
                red: Double(lerp(ar, br, t: gradientTransition)),
                green: Double(lerp(ag, bg, t: gradientTransition)),
                blue: Double(lerp(ab, bb, t: gradientTransition)),
                opacity: Double(lerp(aa, ba, t: gradientTransition))
            )
        }
        
        let top = lerpColor(from.topColor, to.topColor, t: gradientTransition)
        let bottom = lerpColor(from.bottomColor, to.bottomColor, t: gradientTransition)
        return LinearGradient(
            gradient: Gradient(colors: [top, bottom]),
            startPoint: .top,
            endPoint: .bottom
        )
    }
}

// Font provider –¥–ª—è PaywallView
struct RoundedFontProvider: PaywallFontProvider {
    func font(for textStyle: Font.TextStyle) -> Font {
        switch textStyle {
        case .largeTitle:
            return Font.system(size: 34, weight: .bold, design: .rounded)
        case .title:
            return Font.system(size: 28, weight: .bold, design: .rounded)
        case .title2:
            return Font.system(size: 22, weight: .bold, design: .rounded)
        case .title3:
            return Font.system(size: 20, weight: .semibold, design: .rounded)
        case .headline:
            return Font.system(size: 17, weight: .semibold, design: .rounded)
        case .body:
            return Font.system(size: 17, weight: .regular, design: .rounded)
        case .callout:
            return Font.system(size: 16, weight: .regular, design: .rounded)
        case .subheadline:
            return Font.system(size: 15, weight: .regular, design: .rounded)
        case .footnote:
            return Font.system(size: 13, weight: .regular, design: .rounded)
        case .caption:
            return Font.system(size: 12, weight: .regular, design: .rounded)
        case .caption2:
            return Font.system(size: 11, weight: .regular, design: .rounded)
        @unknown default:
            return Font.system(size: 17, weight: .regular, design: .rounded)
        }
    }
}

// --- yakutiaGradients ---
fileprivate let yakutiaGradients: [(topColor: UIColor, bottomColor: UIColor, name: String, description: String)] = [
    (UIColor(red: 0.53, green: 0.81, blue: 0.92, alpha: 1.0), UIColor(red: 0.34, green: 0.71, blue: 0.29, alpha: 1.0), "summerDay", "–õ–µ—Ç–Ω–∏–π –¥–µ–Ω—å –≤ –Ø–∫—É—Ç–∏–∏"),
    (UIColor(red: 0.99, green: 0.55, blue: 0.24, alpha: 1.0), UIColor(red: 0.53, green: 0.27, blue: 0.47, alpha: 1.0), "tundraSunset", "–ó–∞–∫–∞—Ç –≤ –±–µ—Å–∫—Ä–∞–π–Ω–µ–π —Ç—É–Ω–¥—Ä–µ"),
    (UIColor(red: 0.98, green: 0.74, blue: 0.47, alpha: 1.0), UIColor(red: 0.67, green: 0.82, blue: 0.98, alpha: 1.0), "lenaSunrise", "–†–∞—Å—Å–≤–µ—Ç –Ω–∞–¥ —Ä–µ–∫–æ–π –õ–µ–Ω–æ–π"),
    (UIColor(red: 0.03, green: 0.05, blue: 0.15, alpha: 1.0), UIColor(red: 0.07, green: 0.08, blue: 0.22, alpha: 1.0), "starryNight", "–ó–≤–µ–∑–¥–Ω–æ–µ –Ω–µ–±–æ –Ø–∫—É—Ç–∏–∏"),
    (UIColor(red: 0.10, green: 0.20, blue: 0.40, alpha: 1.0), UIColor(red: 0.17, green: 0.54, blue: 0.46, alpha: 1.0), "northernLights", "–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ –Ω–∞–¥ —è–∫—É—Ç—Å–∫–∏–º–∏ –ø—Ä–æ—Å—Ç–æ—Ä–∞–º–∏"),
    (UIColor(red: 0.83, green: 0.89, blue: 0.97, alpha: 1.0), UIColor(red: 0.66, green: 0.78, blue: 0.91, alpha: 1.0), "frostyMorning", "–ú–æ—Ä–æ–∑–Ω–æ–µ –∑–∏–º–Ω–µ–µ —É—Ç—Ä–æ –≤ –Ø–∫—É—Ç–∏–∏"),
    (UIColor(red: 0.24, green: 0.53, blue: 0.24, alpha: 1.0), UIColor(red: 0.18, green: 0.32, blue: 0.14, alpha: 1.0), "summerForest", "–¢–∞–π–≥–∞ –≤ –ª–µ—Ç–Ω—é—é –ø–æ—Ä—É"),
    (UIColor(red: 0.96, green: 0.87, blue: 0.62, alpha: 1.0), UIColor(red: 0.72, green: 0.55, blue: 0.30, alpha: 1.0), "ysyakh", "–´—Å—ã–∞—Ö - –ø—Ä–∞–∑–¥–Ω–∏–∫ –ª–µ—Ç–∞ –≤ –Ø–∫—É—Ç–∏–∏"),
    (UIColor(red: 0.70, green: 0.75, blue: 0.78, alpha: 1.0), UIColor(red: 0.42, green: 0.45, blue: 0.50, alpha: 1.0), "verkhoyansk", "–ì–æ—Ä—ã –í–µ—Ä—Ö–æ—è–Ω—Å–∫–æ–≥–æ —Ö—Ä–µ–±—Ç–∞"),
    (UIColor(red: 0.89, green: 0.45, blue: 0.15, alpha: 1.0), UIColor(red: 0.65, green: 0.30, blue: 0.10, alpha: 1.0), "autumnTuymaada", "–û—Å–µ–Ω–Ω–∏–µ –∫—Ä–∞—Å–∫–∏ –¥–æ–ª–∏–Ω—ã –¢—É–π–º–∞–∞–¥–∞"),
    (UIColor(red: 0.25, green: 0.32, blue: 0.45, alpha: 1.0), UIColor(red: 0.16, green: 0.19, blue: 0.28, alpha: 1.0), "yakutianGems", "–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –∫–∞–º–Ω–∏ –Ø–∫—É—Ç–∏–∏"),
    (UIColor(red: 0.85, green: 0.88, blue: 0.90, alpha: 1.0), UIColor(red: 0.65, green: 0.70, blue: 0.75, alpha: 1.0), "lenaFog", "–£—Ç—Ä–µ–Ω–Ω–∏–π —Ç—É–º–∞–Ω –Ω–∞–¥ —Ä–µ–∫–æ–π –õ–µ–Ω–æ–π"),
    // –ù–æ–≤—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã:
    (UIColor(red: 0.99, green: 0.99, blue: 0.85, alpha: 1.0), UIColor(red: 0.60, green: 0.80, blue: 0.98, alpha: 1.0), "polarDay", "–ü–æ–ª—è—Ä–Ω—ã–π –¥–µ–Ω—å ‚Äî —Å–≤–µ—Ç–ª–æ–µ –Ω–µ–±–æ –∏ —Ö–æ–ª–æ–¥–Ω—ã–π –≤–æ–∑–¥—É—Ö"),
    (UIColor(red: 0.60, green: 0.80, blue: 1.0, alpha: 1.0), UIColor(red: 0.90, green: 0.95, blue: 1.0, alpha: 1.0), "iceFairyTale", "–õ–µ–¥—è–Ω–∞—è —Å–∫–∞–∑–∫–∞ ‚Äî –º–æ—Ä–æ–∑–Ω—ã–µ —É–∑–æ—Ä—ã –∏ –≥–æ–ª—É–±–æ–π –ª—ë–¥"),
    (UIColor(red: 0.98, green: 0.80, blue: 0.60, alpha: 1.0), UIColor(red: 0.60, green: 0.30, blue: 0.18, alpha: 1.0), "warmChum", "–¢—ë–ø–ª—ã–π —á—É–º ‚Äî —É—é—Ç –∏ —Ç–µ–ø–ª–æ –≤ –∑–∏–º–Ω–µ–π –Ω–æ—á–∏"),
    (UIColor(red: 0.60, green: 0.80, blue: 0.60, alpha: 1.0), UIColor(red: 0.30, green: 0.50, blue: 0.70, alpha: 1.0), "summerRain", "–õ–µ—Ç–Ω–∏–π –¥–æ–∂–¥—å ‚Äî —Å–≤–µ–∂–µ—Å—Ç—å –∑–µ–ª–µ–Ω–∏ –∏ –ø—Ä–æ—Ö–ª–∞–¥–∞ –≤–æ–¥—ã"),
    (UIColor(red: 0.40, green: 0.60, blue: 0.30, alpha: 1.0), UIColor(red: 0.80, green: 0.95, blue: 0.70, alpha: 1.0), "fairyForest", "–°–∫–∞–∑–æ—á–Ω—ã–π –ª–µ—Å ‚Äî –º—è–≥–∫–∞—è –∑–µ–ª–µ–Ω—å –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏"),
    (UIColor(red: 0.98, green: 0.70, blue: 0.30, alpha: 1.0), UIColor(red: 0.60, green: 0.30, blue: 0.10, alpha: 1.0), "amberEvening", "–Ø–Ω—Ç–∞—Ä–Ω—ã–π –≤–µ—á–µ—Ä ‚Äî —Ç—ë–ø–ª—ã–π —Å–≤–µ—Ç –∑–∞–∫–∞—Ç–∞"),
    (UIColor(red: 0.98, green: 0.60, blue: 0.80, alpha: 1.0), UIColor(red: 0.60, green: 0.80, blue: 0.98, alpha: 1.0), "pinkDawn", "–†–æ–∑–æ–≤—ã–π —Ä–∞—Å—Å–≤–µ—Ç ‚Äî –Ω–µ–∂–Ω—ã–µ –æ–±–ª–∞–∫–∞ –∏ –≥–æ–ª—É–±–æ–µ –Ω–µ–±–æ"),
    (UIColor(red: 0.70, green: 0.90, blue: 1.0, alpha: 1.0), UIColor(red: 0.30, green: 0.60, blue: 0.80, alpha: 1.0), "blueIce", "–ì–æ–ª—É–±–æ–π –ª—ë–¥ ‚Äî –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —Å–≤–µ–∂–µ—Å—Ç—å –∑–∏–º—ã"),
    (UIColor(red: 0.90, green: 0.30, blue: 0.30, alpha: 1.0), UIColor(red: 0.98, green: 0.80, blue: 0.60, alpha: 1.0), "ornament", "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –æ—Ä–Ω–∞–º–µ–Ω—Ç ‚Äî –∫—Ä–∞—Å–Ω—ã–µ –∏ –∑–æ–ª–æ—Ç—ã–µ –º–æ—Ç–∏–≤—ã"),
    (UIColor(red: 0.98, green: 0.60, blue: 0.30, alpha: 1.0), UIColor(red: 0.30, green: 0.10, blue: 0.05, alpha: 1.0), "cozyFire", "–£—é—Ç–Ω—ã–π –∫–æ—Å—Ç—ë—Ä ‚Äî —Ç–µ–ø–ª–æ –∏ —Å–≤–µ—Ç –≤ –∑–∏–º–Ω–µ–º –ª–µ—Å—É")
]


