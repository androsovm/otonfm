import Foundation
import AVFoundation
import Combine

// –ü—Ä–æ—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ RadioPlayer –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AudioService
class AudioServiceWrapper {
    private let audioService: AudioService
    private var cancellables = Set<AnyCancellable>()
    
    // Callbacks –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º RadioPlayer
    var onPlaybackStateChanged: ((Bool) -> Void)?
    var onBufferingStateChanged: ((Bool) -> Void)?
    var onConnectingStateChanged: ((Bool) -> Void)?
    var onMetadataReceived: (([AVMetadataItem]) -> Void)?
    var onError: ((RadioError) -> Void)?
    
    init() {
        self.audioService = AudioService()
        setupBindings()
    }
    
    private func setupBindings() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        audioService.isPlaying
            .receive(on: DispatchQueue.main)
            .sink { [weak self] isPlaying in
                self?.onPlaybackStateChanged?(isPlaying)
            }
            .store(in: &cancellables)
        
        audioService.isBuffering
            .receive(on: DispatchQueue.main)
            .sink { [weak self] isBuffering in
                self?.onBufferingStateChanged?(isBuffering)
            }
            .store(in: &cancellables)
        
        audioService.playerState
            .receive(on: DispatchQueue.main)
            .sink { [weak self] state in
                if case .error(let radioError) = state {
                    self?.onError?(radioError)
                }
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self?.onConnectingStateChanged?(state == .connecting)
            }
            .store(in: &cancellables)
        
        // –î–µ–ª–µ–≥–∞—Ç –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        audioService.delegate = self
    }
    
    func play(url: URL) {
        audioService.play(url: url)
    }
    
    func pause() {
        audioService.pause()
    }
    
    func stop() {
        audioService.stop()
    }
}

// MARK: - AudioServiceDelegate
extension AudioServiceWrapper: AudioServiceDelegate {
    func audioService(_ service: AudioServiceProtocol, didUpdateMetadata metadata: [AVMetadataItem]) {
        print("üéµ AudioServiceWrapper received metadata: \(metadata.count) items")
        for item in metadata {
            if let value = item.value {
                print("üéµ Metadata item: \(item.identifier?.rawValue ?? "unknown") = \(value)")
            }
            if let stringValue = item.stringValue {
                print("üéµ String value: \(stringValue)")
            }
        }
        onMetadataReceived?(metadata)
    }
}